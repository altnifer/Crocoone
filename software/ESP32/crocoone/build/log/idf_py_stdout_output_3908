[1/11] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D D:\Users\nikita\Documents\Crocoone\crocoone_refactoring\ESP_crocoone\build\bootloader\esp-idf\esptool_py && D:\DATA\Program\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe D:/DATA/Program/ESP-IDF/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 D:/Users/nikita/Documents/Crocoone/crocoone_refactoring/ESP_crocoone/build/bootloader/bootloader.bin"
Bootloader binary size 0x6810 bytes. 0x7f0 bytes (7%) free.
[2/9] Building C object esp-idf/cmd_parser/CMakeFiles/__idf_cmd_parser.dir/cmd_parser.c.obj
[3/9] Linking C static library esp-idf\cmd_parser\libcmd_parser.a
[4/9] Linking C static library esp-idf\main\libmain.a
[5/9] Generating ld/sections.ld
[6/9] Building C object CMakeFiles/app-template.elf.dir/project_elf_src_esp32.c.obj
[7/9] Linking CXX executable app-template.elf
[8/9] Generating binary image from built executable
esptool.py v4.6.2
Creating esp32 image...
Merged 25 ELF sections
Successfully created esp32 image.
Generated D:/Users/nikita/Documents/Crocoone/crocoone_refactoring/ESP_crocoone/build/app-template.bin
[9/9] cmd.exe /C "cd /D D:\Users\nikita\Documents\Crocoone\crocoone_refactoring\ESP_crocoone\build\esp-idf\esptool_py && D:\DATA\Program\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe D:/DATA/Program/ESP-IDF/components/partition_table/check_sizes.py --offset 0x8000 partition --type app D:/Users/nikita/Documents/Crocoone/crocoone_refactoring/ESP_crocoone/build/partition_table/partition-table.bin D:/Users/nikita/Documents/Crocoone/crocoone_refactoring/ESP_crocoone/build/app-template.bin"
app-template.bin binary size 0xc02b0 bytes. Smallest app partition is 0x100000 bytes. 0x3fd50 bytes (25%) free.
